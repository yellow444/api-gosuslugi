# tests/test_token.py

import requests
import requests_mock
import pytest
from esia.aas.token import exchange_code_for_token, get_service_token
from esia.aas.config import ESIA_TOKEN_URL, CLIENT_ID, CLIENT_SECRET, REDIRECT_URI

"""
üìå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤.

üîπ –°–æ–≥–ª–∞—Å–Ω–æ:
   - "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ï–°–ò–ê" (—Ä–∞–∑–¥–µ–ª 4.3)&#8203;:contentReference[oaicite:1]{index=1}
   - "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å REST API –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è" (—Ä–∞–∑–¥–µ–ª 5.1.5)&#8203;:contentReference[oaicite:2]{index=2}
"""


@pytest.fixture
def requests_mocks():
    with requests_mock.Mocker() as mock:
        yield mock


def test_exchange_code_for_token(requests_mocks):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Ç–æ–∫–µ–Ω."""
    requests_mocks.post(ESIA_TOKEN_URL, json={
                       "access_token": "test_token", "expires_in": 3600})
    response = exchange_code_for_token("valid_auth_code")
    assert response["access_token"] == "test_token"


def test_get_service_token(requests_mocks):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    requests_mocks.post(ESIA_TOKEN_URL, json={
                       "access_token": "service_token", "expires_in": 3600})
    response = get_service_token()
    assert response["access_token"] == "service_token"


def test_exchange_code_for_token_invalid(requests_mocks):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ï–°–ò–ê."""
    requests_mocks.post(ESIA_TOKEN_URL, json={
                       "error": "invalid_grant"}, status_code=400)
    with pytest.raises(Exception, match="invalid_grant"):
        exchange_code_for_token("invalid_auth_code")
