# tests/test_errors.py

import pytest
import json
import re
from requests import Response
from requests.exceptions import Timeout, ConnectionError, RequestException
from esia.aas.errors import (
    EsiaAPIError, EsiaAuthError, DigitalProfileError, NetworkError,
    parse_error, parse_callback_error, handle_http_errors, handle_network_errors
)


"""
üìå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.

üîπ –°–æ–≥–ª–∞—Å–Ω–æ:
   - "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å REST API –¶–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è" (—Ç–∞–±–ª–∏—Ü–∞ –æ—à–∏–±–æ–∫)&#8203;:contentReference[oaicite:4]{index=4}
   - "–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ï–°–ò–ê" (—Ä–∞–∑–¥–µ–ª 5.2)&#8203;:contentReference[oaicite:5]{index=5}
"""


# === 1. –¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –æ—à–∏–±–æ–∫ ===


def test_esia_api_error():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è EsiaAPIError."""
    error = EsiaAPIError("ESIA-007002", "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")
    assert str(error) == "[ESIA-007002] –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"


def test_digital_profile_error():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è DigitalProfileError."""
    error = DigitalProfileError("–û—à–∏–±–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
    assert str(error) == "–û—à–∏–±–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"


def test_network_error():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è NetworkError."""
    error = NetworkError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏")
    assert str(error) == "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏"

# === 2. –¢–µ—Å—Ç—ã –¥–ª—è parse_error() ===


def test_parse_esia_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ï–°–ò–ê."""
    error_json = json.dumps({"error": "ESIA-007002"})
    with pytest.raises(EsiaAPIError) as exc_info:
        raise parse_error(error_json)
    assert exc_info.value.error_code == "ESIA-007002"
    assert "–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞" in str(exc_info.value)


def test_parse_unknown_esia_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –ï–°–ò–ê."""
    error_json = json.dumps({"error": "unknown_error"})
    with pytest.raises(EsiaAPIError) as exc_info:
        raise parse_error(error_json)
    assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ï–°–ò–ê" in str(exc_info.value)


def test_parse_digital_profile_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."""
    error_json = json.dumps({"errorCode": "ESIA-036701"})
    with pytest.raises(DigitalProfileError) as exc_info:
        raise parse_error(error_json)
    assert "–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–ø —Å–æ–≥–ª–∞—Å–∏—è" in str(exc_info.value)


def test_parse_json_decode_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞."""
    invalid_json = "invalid json"
    with pytest.raises(Exception, match="–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"):
        raise parse_error(invalid_json)

# === 3. –¢–µ—Å—Ç—ã –¥–ª—è parse_callback_error() ===


def test_parse_callback_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–æ—à–∏–±–∫–∏ –ï–°–ò–ê."""
    query_params = {
        "error": "invalid_request",
        "error_description": "ESIA-007003: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä",
        "state": "12345"
    }
    with pytest.raises(EsiaAPIError) as exc_info:
        raise parse_callback_error(query_params)
    assert "ESIA-007003" in str(exc_info.value)


def test_parse_callback_unknown_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π callback-–æ—à–∏–±–∫–∏."""
    query_params = {
        "error": "unknown_error",
        "error_description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
        "state": "67890"
    }
    with pytest.raises(EsiaAPIError) as exc_info:
        raise parse_callback_error(query_params)
    assert "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ï–°–ò–ê" in str(exc_info.value)

# === 4. –¢–µ—Å—Ç—ã –¥–ª—è handle_http_errors() ===


@pytest.fixture
def mock_response():
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç Response –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    response = Response()
    response._content = b'{"error": "ESIA-007014"}'
    response.encoding = 'utf-8'
    return response


def test_handle_http_errors_400(mock_response):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 400 (–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å)."""
    mock_response.status_code = 400
    with pytest.raises(EsiaAPIError) as exc_info:
        handle_http_errors(mock_response)
    assert "400" in str(exc_info.value)
    assert exc_info.value.error_code == "400"


def test_handle_http_errors_401(mock_response):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 401 (–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)."""
    mock_response.status_code = 401
    with pytest.raises(EsiaAuthError) as exc_info:
        handle_http_errors(mock_response)
    assert "401" in str(exc_info.value)
    assert exc_info.value.error_code == "401"


def test_handle_http_errors_403(mock_response):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 403 (–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω)."""
    mock_response.status_code = 403
    with pytest.raises(EsiaAuthError) as exc_info:
        handle_http_errors(mock_response)
    assert "403" in str(exc_info.value)
    assert exc_info.value.error_code == "403"


def test_handle_http_errors_500(mock_response):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ 500 (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ï–°–ò–ê)."""
    mock_response.status_code = 500
    with pytest.raises(EsiaAPIError) as exc_info:
        handle_http_errors(mock_response)
    assert "500" in str(exc_info.value)
    assert exc_info.value.error_code == "500"
